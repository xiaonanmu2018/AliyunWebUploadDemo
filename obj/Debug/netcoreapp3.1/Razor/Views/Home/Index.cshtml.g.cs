#pragma checksum "C:\Users\PARATERA\Desktop\AliyunWebUploadDemo\Views\Home\Index.cshtml" "{ff1816ec-aa5e-4d10-87f7-6f4963833460}" "e6f1e441c2f08a53498a33189e36b8b9fb153d4f"
// <auto-generated/>
#pragma warning disable 1591
[assembly: global::Microsoft.AspNetCore.Razor.Hosting.RazorCompiledItemAttribute(typeof(AspNetCore.Views_Home_Index), @"mvc.1.0.view", @"/Views/Home/Index.cshtml")]
namespace AspNetCore
{
    #line hidden
    using System;
    using System.Collections.Generic;
    using System.Linq;
    using System.Threading.Tasks;
    using Microsoft.AspNetCore.Mvc;
    using Microsoft.AspNetCore.Mvc.Rendering;
    using Microsoft.AspNetCore.Mvc.ViewFeatures;
#nullable restore
#line 1 "C:\Users\PARATERA\Desktop\AliyunWebUploadDemo\Views\_ViewImports.cshtml"
using AliyunWebUploadDemo;

#line default
#line hidden
#nullable disable
#nullable restore
#line 2 "C:\Users\PARATERA\Desktop\AliyunWebUploadDemo\Views\_ViewImports.cshtml"
using AliyunWebUploadDemo.Models;

#line default
#line hidden
#nullable disable
    [global::Microsoft.AspNetCore.Razor.Hosting.RazorSourceChecksumAttribute(@"SHA1", @"e6f1e441c2f08a53498a33189e36b8b9fb153d4f", @"/Views/Home/Index.cshtml")]
    [global::Microsoft.AspNetCore.Razor.Hosting.RazorSourceChecksumAttribute(@"SHA1", @"e688c03994d1e279ac37b4d71e5c6b9702ada2ca", @"/Views/_ViewImports.cshtml")]
    #nullable restore
    public class Views_Home_Index : global::Microsoft.AspNetCore.Mvc.Razor.RazorPage<dynamic>
    #nullable disable
    {
        #line hidden
        #pragma warning disable 0649
        private global::Microsoft.AspNetCore.Razor.Runtime.TagHelpers.TagHelperExecutionContext __tagHelperExecutionContext;
        #pragma warning restore 0649
        private global::Microsoft.AspNetCore.Razor.Runtime.TagHelpers.TagHelperRunner __tagHelperRunner = new global::Microsoft.AspNetCore.Razor.Runtime.TagHelpers.TagHelperRunner();
        #pragma warning disable 0169
        private string __tagHelperStringValueBuffer;
        #pragma warning restore 0169
        private global::Microsoft.AspNetCore.Razor.Runtime.TagHelpers.TagHelperScopeManager __backed__tagHelperScopeManager = null;
        private global::Microsoft.AspNetCore.Razor.Runtime.TagHelpers.TagHelperScopeManager __tagHelperScopeManager
        {
            get
            {
                if (__backed__tagHelperScopeManager == null)
                {
                    __backed__tagHelperScopeManager = new global::Microsoft.AspNetCore.Razor.Runtime.TagHelpers.TagHelperScopeManager(StartTagHelperWritingScope, EndTagHelperWritingScope);
                }
                return __backed__tagHelperScopeManager;
            }
        }
        private global::Microsoft.AspNetCore.Mvc.Razor.TagHelpers.HeadTagHelper __Microsoft_AspNetCore_Mvc_Razor_TagHelpers_HeadTagHelper;
        private global::Microsoft.AspNetCore.Mvc.Razor.TagHelpers.BodyTagHelper __Microsoft_AspNetCore_Mvc_Razor_TagHelpers_BodyTagHelper;
        #pragma warning disable 1998
        public async override global::System.Threading.Tasks.Task ExecuteAsync()
        {
            WriteLiteral("\r\n");
#nullable restore
#line 2 "C:\Users\PARATERA\Desktop\AliyunWebUploadDemo\Views\Home\Index.cshtml"
  
    Layout = "";

#line default
#line hidden
#nullable disable
            WriteLiteral("<!DOCTYPE html>\r\n<html lang=\"en\">\r\n\r\n");
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("head", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.StartTagAndEndTag, "e6f1e441c2f08a53498a33189e36b8b9fb153d4f3497", async() => {
                WriteLiteral(@"
    <meta charset=""UTF-8"">
    <meta http-equiv=""X-UA-Compatible"" content=""IE=edge"">
    <meta name=""viewport"" content=""width=device-width, initial-scale=1.0"">
    <title>Document</title>
    <script type=""text/javascript"" src=""https://gosspublic.alicdn.com/aliyun-oss-sdk-6.16.0.min.js""></script>
    <script src=""https://cdn.staticfile.org/jquery/1.10.2/jquery.min.js""></script>
");
            }
            );
            __Microsoft_AspNetCore_Mvc_Razor_TagHelpers_HeadTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.Razor.TagHelpers.HeadTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_Razor_TagHelpers_HeadTagHelper);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
            WriteLiteral("\r\n\r\n");
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("body", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.StartTagAndEndTag, "e6f1e441c2f08a53498a33189e36b8b9fb153d4f4869", async() => {
                WriteLiteral(@"

    <input type=""file"" id=""btn"" onchange=""upload()"">
    <div id=""progress""></div>
    <script type=""text/javascript"">

        var sts_key = ""STS_Data"";

        $(function () {
           
            var STS_Data = cacheGet(sts_key);
            if (!STS_Data) {
                $.getJSON(""/Home/GetSTSToken"", function (data) {
                    STS_Data = data;
                    console.log(STS_Data);
                    // 存数据
                    cacheSet(sts_key, STS_Data, 1200);
                });
            }

        });



        


        //const options = {
        //    // 获取分片上传进度、断点和返回值。
        //    progress: (p, cpt, res) => {
        //        console.log(p);
        //        $(""#progress"").text((p.toFixed(2) * 100) + ""%"");
        //    },
        //    // 设置并发上传的分片数量。
        //    parallel: 4,
        //    // 设置分片大小。默认值为1 MB，最小值为100 KB。
        //    partSize: 20 * 1024 * 1024,
        //    // headers,
        //    // 自定义元数据，通过HeadObject接");
                WriteLiteral(@"口可以获取Object的元数据。
        //    // meta: { year: 2020, people: ""test"" },
        //    //mime: ""text/plain"",
        //};

        async function putObject(data, filename,filesize) {
            try {
                console.log(dataToLocalLongString(new Date()));
                $(""#progress"").text(""0"");
                var STS_Data = cacheGet(sts_key);

                var client = new OSS({
                    region: 'oss-cn-beijing', //你的oss地址 ，具体位置见下图
                    accessKeyId: STS_Data.accessKeyId, //你的ak
                    accessKeySecret: STS_Data.accessKeySecret, //你的secret
                    stsToken: STS_Data.securityToken,//
                    bucket: 'xiaonanmu' //你的oss名字
                });

                var result;

                if (filesize / 1024 / 1024 <= 100) {

                    console.log(""简单上传"");

                    //简单上传
                    // 填写Object完整路径。Object完整路径中不能包含Bucket名称。
                    // 您可以通过自定义文件名（例如exampleobject.txt）或文件完整");
                WriteLiteral(@"路径（例如exampledir/exampleobject.txt）的形式实现将数据上传到当前Bucket或Bucket中的指定目录。
                    // data对象可以自定义为file对象、Blob数据或者OSS Buffer。
                    result = await client.put(
                        filename,
                        data
                        //{headers}
                    );

                }
                else {

                    console.log(""分片上传"");
                    // 分片上传。
                    result = await client.multipartUpload(filename, data, {
                        // 获取分片上传进度、断点和返回值。
                        progress: (p, cpt, res) => {
                            console.log(p);
                            $(""#progress"").text((p.toFixed(2) * 100) + ""%"");
                        },
                        // 设置并发上传的分片数量。
                        parallel: 20,
                        // 设置分片大小。默认值为1 MB，最小值为100 KB。
                        partSize: 3 * 1024 * 1024,
                    });
                }


                console.log(result);");
                WriteLiteral(@"
                console.log(dataToLocalLongString(new Date()));

            } catch (e) {
                console.log(e);
            }
        }


        function upload(event) {

            var e = window.event || event
            var file = e.target.files[0];
            var filename = file.name;

            console.log(file);
            console.log(filename);

            putObject(file, ""test/"" + filename, file.size);
        }



        //时间日期转换成string（yyyy-MM-ddThh:mm:ss）
        function dataToLocalLongString(d) {
            var ar_date = [d.getFullYear(), d.getMonth() + 1, d.getDate(), d.getHours(), d.getMinutes(), d.getSeconds()];
            for (var i = 0; i < ar_date.length; i++) ar_date[i] = dFormat(ar_date[i]);
            return ar_date.slice(0, 3).join('-') + 'T' + ar_date.slice(3).join(':');
            function dFormat(i) { return i < 10 ? ""0"" + i.toString() : i; }
        }


  
        function cacheSet(key, value = '', expire = 0) {
            ");
                WriteLiteral(@"// 当前时间戳
            var nowTime = Math.ceil(Date.now() / 1000);
            // 设置数据
            localStorage.setItem(key, JSON.stringify(value))
            // 判断是否有过期时间
            if (expire > 0) {
                // 设置过期时间
                localStorage.setItem(key + '_expire', (nowTime + parseInt(expire)))
            }
            else {
                // 设置过期时间
                localStorage.setItem(key + '_expire', 0)
            }
            return true;
        }


        function cacheGet(key) {
            // 当前时间戳
            var nowTime = Math.ceil(Date.now() / 1000);
            // 获取键时间戳
            var rawCacheDataExpire = localStorage.getItem(key + '_expire');
            var cacheDataExpire = parseInt(rawCacheDataExpire);

            // 强制过期时间 为0时忽略 用于解决缓存时间与本地时间差距过大(例本地更改了计算机时间)
            var forceTime = 3600;
            // 判断用户是否删除了过期时间 判断是否设置了过期时间 判断是否超过过期时间 判断当前计算机时间与设置的过期时间差距是否过大
            if ((rawCacheDataExpire === null) || (cacheDataExpire > 0) && ((n");
                WriteLiteral(@"owTime > cacheDataExpire) || (forceTime > 0 && Math.abs(cacheDataExpire - nowTime) > forceTime))) {
                // 删除过期key
                localStorage.removeItem(key)
                // 删除过期时间
                localStorage.removeItem(key + '_expire')
                return false;
            }

            // 获取数据
            cacheData = JSON.parse(localStorage.getItem(key));

            if (cacheData === null || cacheData === false) {
                return false;
            }
            // 返回数据
            return cacheData;
        }

    </script>

");
            }
            );
            __Microsoft_AspNetCore_Mvc_Razor_TagHelpers_BodyTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.Razor.TagHelpers.BodyTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_Razor_TagHelpers_BodyTagHelper);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
            WriteLiteral("\r\n\r\n</html>");
        }
        #pragma warning restore 1998
        #nullable restore
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.ViewFeatures.IModelExpressionProvider ModelExpressionProvider { get; private set; } = default!;
        #nullable disable
        #nullable restore
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.IUrlHelper Url { get; private set; } = default!;
        #nullable disable
        #nullable restore
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.IViewComponentHelper Component { get; private set; } = default!;
        #nullable disable
        #nullable restore
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.Rendering.IJsonHelper Json { get; private set; } = default!;
        #nullable disable
        #nullable restore
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper<dynamic> Html { get; private set; } = default!;
        #nullable disable
    }
}
#pragma warning restore 1591
